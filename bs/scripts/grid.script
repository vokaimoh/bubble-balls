local m_game = require "bs.lua.game"

local function dot_create(col, row)
	local dot = {}
	dot.pos = vmath.vector3(m_game.cell_size * (col - 1) + m_game.cell_offset_x, m_game.cell_size * (row - 1) + m_game.cell_offset_y, 0)
	dot.color = m_game.dot_colors[math.random(#m_game.dot_colors)]
	dot.id = factory.create("#factory-dot", dot.pos, nil, { color = dot.color })
	return dot
end

local function cells_clear(cells, message)
	for i = 1, 8 do
		for j = 1, 12 do
			if cells[i][j].dot_id ~= nil then
				msg.post(cells[i][j].dot_id, message, { duration = m_game.duration_fade })
				msg.post(cells[i][j].dot_id, "delete", { duration = m_game.duration_fade })
			end
		end
	end
	return nil
end

local function cells_fill(cells, first)
	if cells ~= nil then
		for i = 1, 8 do
			local not_empty = nil
			for j = 1, 12 do
				if cells[i][j].dot_id ~= nil then
					not_empty = true
					break
				end
			end
			if not_empty == nil then
				for k = 1, 12 do
					local dot = dot_create(i, k)
					if first == false then
						msg.post(dot.id, "fade_in", { duration = m_game.duration_create })
						msg.post(dot.id, "scale_in", { duration = m_game.duration_create })
					else
						msg.post(dot.id, "fade_in", { duration = m_game.duration_fade })
					end
					cells[i][k] = { col = i, row = k, dot_id = dot.id, dot_pos = dot.pos, dot_color = dot.color }
				end
			end
		end
	end
end

local function cells_create()
	local cells = {}
	for i = 1, 8 do
		cells[i] = {}
		for j = 1, 12 do
			cells[i][j] = {}
		end
	end
	return cells
end

function init(self)
	self.cells = cells_create()
	self.link = {}
	cells_fill(self.cells, true)
	self.score = 0
	m_game.input_focus_waiting(m_game.duration_create)
end

function on_message(self, message_id, message, sender)
	if message_id == m_game.cells_clear then
		msg.post(".", "release_input_focus")
		self.cells = cells_clear(self.cells, "hide")
	end
end

local function dots_move(cell_a, cell_b, property, empty, k, offset)
	go.animate(cell_a.dot_id, property, go.PLAYBACK_ONCE_FORWARD,
	m_game.cell_size * (k - 1 - empty) + offset, go.EASING_LINEAR, m_game.duration_move)
	cell_b.dot_id = cell_a.dot_id
	cell_b.dot_color = cell_a.dot_color
	cell_a.dot_id = nil
end

local function check_over(cells)
	if cells ~= nil then
		for i = 1, 8 do
			for j = 1, 12 do
				if cells[i][j].dot_id ~= nil then
					if i > 1 then -- check left
						if cells[i-1][j].dot_id ~= nil and cells[i-1][j].dot_color == cells[i][j].dot_color then
							return false
						end
					end
					if i < 8 then -- check right
						if cells[i+1][j].dot_id ~= nil and cells[i+1][j].dot_color == cells[i][j].dot_color then
							return false
						end
					end
					if j > 1 then -- check down
						if cells[i][j-1].dot_id ~= nil and cells[i][j-1].dot_color == cells[i][j].dot_color then
							return false
						end
					end
					if j < 12 then -- check up
						if cells[i][j+1].dot_id ~= nil and cells[i][j+1].dot_color == cells[i][j].dot_color then
							return false
						end
					end
				end
			end
		end
	end
	return true
end

local function cells_replace(self)
	local empty_h = 0
	local is_moved = nil
	if self.cells ~= nil then
		for i = 1, 8 do
			local empty_v = 0
			for j = 1, 12 do
				if self.cells[i][j].dot_id == nil then
					empty_v = empty_v + 1
				elseif empty_v > 0 then
					dots_move(self.cells[i][j], self.cells[i][j - empty_v], "position.y", empty_v, j, m_game.cell_offset_y)
					if is_moved == nil then
						is_moved = true
					end
				end
			end
			if empty_v > 11 then
				empty_h = empty_h + 1
			elseif empty_h > 0 then
				for j = 1, 12 do
					if self.cells[i][j].dot_id ~= nil then
						dots_move(self.cells[i][j], self.cells[i - empty_h][j], "position.x", empty_h, i, m_game.cell_offset_x)
						if is_moved == nil then
							is_moved = true
						end
					end
				end
			end
		end
	end
	if is_moved ~= nil then
		timer.delay(m_game.duration_move, false, function()
			if empty_h > 0 then
				cells_fill(self.cells, false)
			end
			if check_over(self.cells) then
				m_game.last = self.score
				if m_game.last > m_game.best then
					m_game.save_best(m_game.last)
				end
				timer.delay(m_game.duration_over, false, function()
					msg.post("game#game", "over")
					self.cells = cells_clear(self.cells, "fade_out")
				end)
			elseif empty_h > 0 then
				m_game.input_focus_waiting(m_game.duration_create - 0.05)
			else
				msg.post(".", "acquire_input_focus")
			end
		end)
	else
		if check_over(self.cells) then
			m_game.last = self.score
			if m_game.last > m_game.best then
				m_game.save_best(m_game.last)
			end
			timer.delay(m_game.duration_over, false, function()
				msg.post("game#game", "over")
				self.cells = cells_clear(self.cells, "fade_out")
			end)
		else
			msg.post(".", "acquire_input_focus")
		end
	end
end

local function score_send(current_score)
	msg.post("game#game", "set_score", { score = current_score })
end

local function preview_send(link_length)
	msg.post("game#game", "set_preview", { score = link_length * (link_length - 1) })
end

local function link_remove(self)
	for i = 1, #self.link do
		msg.post(self.link[i].dot_id, "unlink", { duration = m_game.duration_create })
		self.cells[self.link[i].col][self.link[i].row].linked = nil
	end
	self.link = {}
	preview_send(#self.link)
end

local function add_to_link(self, pos)
	local col = math.floor((pos.x - (m_game.cell_offset_x - m_game.cell_size / 2)) / m_game.cell_size) + 1
	local row = math.floor((pos.y - (m_game.cell_offset_y - m_game.cell_size / 2)) / m_game.cell_size) + 1
	if col > 0 and row > 0 and col < 9 and row < 13 then
		if self.cells[col][row].dot_id ~= nil then
			if #self.link > 0 then
				if self.cells[col][row].linked ~= nil then
					msg.post(".", "release_input_focus")
					self.score = self.score + (#self.link * (#self.link - 1))
					for i = 1, #self.link do
						msg.post(self.link[i].dot_id, "fade_out", { duration = m_game.duration_create })
						msg.post(self.link[i].dot_id, "scale_out", { duration = m_game.duration_create })
						msg.post(self.link[i].dot_id, "delete", { duration = m_game.duration_create })
						self.cells[self.link[i].col][self.link[i].row].linked = nil
						self.cells[self.link[i].col][self.link[i].row].dot_id = nil
					end
					self.link = {}
					sound.play("#sound-pop", { gain = m_game.volume * m_game.volume_max })
					timer.delay(m_game.duration_create, false, function()
						cells_replace(self)
						score_send(self.score)
						preview_send(#self.link)
					end)
				else
					link_remove(self)
					add_to_link(self, pos)
				end
			else
				local colors = {}
				for i = 1, 8 do
					colors[i] = {}
					for j = 1, 12 do
						colors[i][j] = {}
						if self.cells[i][j].dot_id ~= nil and self.cells[i][j].dot_color == self.cells[col][row].dot_color then
							colors[i][j].dot_id = self.cells[i][j].dot_id
						end
					end
				end
				if #colors > 1 then
					local neighbors = {}
					local function check_cells(check_col, check_row)
						if colors[check_col][check_row].dot_id ~= nil then
							neighbors[#neighbors+1] = {}
							neighbors[#neighbors].col = check_col
							neighbors[#neighbors].row = check_row
							neighbors[#neighbors].dot_id = colors[check_col][check_row].dot_id
							colors[check_col][check_row].dot_id = nil
						end
					end
					if col > 1 then -- check left
						check_cells(col-1, row)
					end
					if col < 8 then -- check right
						check_cells(col+1, row)
					end
					if row > 1 then -- check down
						check_cells(col, row-1)
					end
					if row < 12 then -- check up
						check_cells(col, row+1)
					end
					if #neighbors > 0 then
						while #neighbors > 0 do
							if neighbors[1].col > 1 then -- check left
								check_cells(neighbors[1].col-1, neighbors[1].row)
							end
							if neighbors[1].col < 8 then -- check right
								check_cells(neighbors[1].col+1, neighbors[1].row)
							end
							if neighbors[1].row > 1 then -- check down
								check_cells(neighbors[1].col, neighbors[1].row-1)
							end
							if neighbors[1].row < 12 then -- check up
								check_cells(neighbors[1].col, neighbors[1].row+1)
							end
							msg.post(neighbors[1].dot_id, "link", { duration = m_game.duration_create })
							self.cells[neighbors[1].col][neighbors[1].row].linked = true
							table.insert(self.link, self.cells[neighbors[1].col][neighbors[1].row])
							table.remove(neighbors, 1)
						end
						sound.play("#sound-select", { gain = m_game.volume * m_game.volume_max })
						preview_send(#self.link)
					end
				end
			end
		elseif #self.link > 0 then
			link_remove(self)
		end
	elseif #self.link > 0 then
		link_remove(self)
	end
end

function on_input(self, action_id, action)
	if action_id == m_game.touch then
		if action.pressed then
			add_to_link(self, m_game.screen_to_world(vmath.vector3(action.x, action.y, 0)))
		end
	end
end
